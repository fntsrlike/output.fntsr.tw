[{"_path":"/articles/2018-06-02-how-to-describe-a-bug-report","_dir":"articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"如何敘述異常回報","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本文是 2018 年在 IThome 鐵人賽所寫的文章，好像也是唯一有完整釋出的文章（艸），用心寫完這篇就好就無力了 XD。在這邊稍微把這篇原本分四天的文章進行整併、校閱，讓有興趣閱讀的人可以讀得比較舒適。"}]}]},{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"今天來講講如何敘述一個議題（issue），通常議題有分兩種，一種是功能請求（feature request），另一種是異常回報（bug report）"},{"type":"element","tag":"sup","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#user-content-fn-1","ariaDescribedBy":"footnote-label","dataFootnoteRef":true,"id":"user-content-fnref-1"},"children":[{"type":"text","value":"1"}]}]},{"type":"element","tag":"sup","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#user-content-fn-2","ariaDescribedBy":"footnote-label","dataFootnoteRef":true,"id":"user-content-fnref-2"},"children":[{"type":"text","value":"2"}]}]},{"type":"text","value":"。由於功能請求中關於需求的描述會涉及不少知識與經驗，使用者和工程師的相關描述可能又大不相同，這方面的知識很難一次論述完整；而異常回報的描述則較為通泛，主要是講述在回報異常時，應該要附上哪些資訊會對開發者更有幫助，不太區分角色，較為簡單。所以本篇先著重在怎樣描述異常。"}]},{"type":"element","tag":"h2","props":{"id":"情境"},"children":[{"type":"text","value":"情境"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"「為什麼我們要學會如何描述一個問題（異常）呢？問題描述有什麼難的？不就是把遇到的問題講出來就好了嗎？難道我講的還不夠清楚嗎？」我想這是多數使用者甚至少數開發者聽到這個主題會有的疑惑，事實上這是很正常的反應，對於多數異常回報者來說，他們已經盡力地把遇到的異常行為描述出來了，他們眼中的異常就是這樣，對於協助我們指出異常的使用者，我們很難用比較強硬的態度說：「這些資訊太少了，我不接受」。到最後我們也只能抱著疑惑的心情嘗試找出使用者遇到的異常，但在資訊不足的情況下，這些異常通常都石沈大海。尷尬的是，你若把異常議題關掉、結案，使用者可能還會抗議，於是這些議題就成為議題追蹤工具（issue tracker）的萬年大石頭，卡在那邊不上不下。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"崩潰的是，在議題追蹤工具裡不只前述的項目卡在那裡，甚至有更多的陳年議題是前輩們留下來的。裡面只簡短地用兩三句話（甚至更短、或只有標題）描述遇到什麼問題，再沒有其他資訊。我們看不懂這個問題到底在說什麼，我們也不知道這個問題要怎麼重現，我們更不知道這個問題是哪個版本的事，是不是在現在的版本已經不會出現了？抱著疑惑、抱著頭，我們・真的・非常・苦惱。 _(:3」∠)＿"}]},{"type":"element","tag":"h2","props":{"id":"目的"},"children":[{"type":"text","value":"目的"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在回報異常時提供充足的資訊，能夠讓開發者更快解決。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"是的，當我們在回報異常時提供充足的資訊，會讓開發者更能精準判斷這個「症狀」的「病因」是什麼，才能更精準的解決軟體的病灶 "},{"type":"element","tag":"sup","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#user-content-fn-3","ariaDescribedBy":"footnote-label","dataFootnoteRef":true,"id":"user-content-fnref-3"},"children":[{"type":"text","value":"3"}]}]},{"type":"text","value":"，從而快速解決問題，既省下開發者的時間成本，使用者也能更快的享受異常排除的成果。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以學會如何描述異常是任何與這份程式有關聯的人都應該要知道的。使用者要知道、客服要知道、專案經理要知道、工程師更要知道。如此一來，使用者或客戶能夠明確將情況描述給開發團隊，讓這異常迅速排除，繼續愉快的使用產品。若是使用者沒有這份知識時，客服就要幫忙過濾，在與使用者的溝通中引導他們把這些資訊回答出來，避免讓不必要的雜訊干擾開發團隊的進度。專案經理更要嚴格把關將送進開發團隊的異常回報，要求客服把缺漏的資訊補上，讓開發團隊可以將時間專注在解決異常而不是重新尋找如何重現它。工程師則更應該要謹記，現在的詳細記錄異常資訊，可以讓我們都不再多背一袋技術債，絕對不要嫌麻煩而省略，不然未來將會耗費更多時間重新釐清這個異常。"}]},{"type":"element","tag":"h2","props":{"id":"作法"},"children":[{"type":"text","value":"作法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那在回報異常前，我們應注意哪些事項呢？那就是查看當前的議題清單裡，有沒有和我們所遇到的異常相同的情況，避免重複（duplicate）回報。同樣的異常應該集中在同個議題討論，而不是散落在清單各處，這樣只會增加開發團隊的排除成本。當我們發現已經有既定異常議題存在時，可以先嘗試了解該討論串的內容，若仍然無法排除，則可以將原本要回報的內容，於該議題討論串中回覆，增加樣本數。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那麼有哪些資訊是在回報異常時需要附上的呢？這邊先以清單的方式表述："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"標題（Title）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"版本（Version number）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"問題簡述（Describe the problem）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"重現步驟（Steps to reproduce）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"預期行為（ What I expected）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"實際行為（What happened instead）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"影像（Screenshot / Video）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"環境（Environments）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"脈絡或程式碼（Context / Source）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"備註（Additional details）"}]}]},{"type":"element","tag":"h3","props":{"id":"標題title"},"children":[{"type":"text","value":"標題（Title）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"無論是什麼類型的文章，有個好的標題就是一個好的開始，議題的標題更是如此。如何用最少的字把異常的輪廓描述出來，就是這個資訊需要探討的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在探討什麼是好的標題前，我們先說說什麼叫做不好的標題。讓人最討厭的標題莫過於內容農場式的標題，也就是講得很誇大，但卻什麼重點都沒提到，像是「這裡有一個很嚴重的問題造成程式崩潰了！」或是「緊急！這個異常讓客戶抓狂了！」等等。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那到底標題要如何說清楚呢？把握一個原則就是至少詳細到不容易和其他類似異常搞混，以現實生活的情境來舉例，假設今天台中某處有個路燈壞了，你想舉報請市府趕緊請人維修："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"南區有個路燈壞了（Ｘ，太籠統，這樣同名不同處的異常可能會太多）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"南區台中路上靠近二二八公園處有路燈壞了（Ｏ，把異常發生的地點指名）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"南區台中路上靠近二二八公園處有路燈不斷閃爍（Ｏ，把故障狀況請得更清楚）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"南區編號 641549 的路燈不會亮（Ｏ，善用產品本身提供的除錯輔助資訊）"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外多用客觀的描述取代主觀看法也會讓標題更好識別："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"網站的選單很難用，一直沒反應（Ｘ）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"網站的選單按鈕太小了，觸控容易失敗，或是誤觸其他按鈕（Ｏ）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"網頁會跳出奇怪的畫面，不知道發生什麼事（Ｘ）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"點擊編輯文章的按鈕，會跳出「We’re sorry, but something rent wrong」的畫面（Ｏ）"}]}]},{"type":"element","tag":"h3","props":{"id":"版本version-number"},"children":[{"type":"text","value":"版本（Version number）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"產品發生異常時的版本號非常重要，它可以開發者確認這個異常是在產品開發的什麼時間點發生的，是否已經在比較新的版本被修復了？或是該行為在以前沒問題，直到某個版本後才發生異常，開發者能透過版本號鎖定變動的位置，了解前後的脈絡，判斷是不是有一個變動提交（commit）沒有注意細節而引發了異常。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若說標題和描述是讓開發者了解空間與事件，那麼版本就是讓開發者知曉時間。在兩者資訊充足的情況下，雙方對談就容易聚焦，而不是在跟平行世界的對方雞同鴨講。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以程式在釋出時應該要有一套版本號訂定風格，讓使用者在回報異常時，開發者能迅速聚焦在準確的範圍去除錯。若是程式是沒有明確版本號，提供程式當前版本控制紀錄中的資訊（通常是最後一次提交的雜湊值（Hash））也是個方式。"}]},{"type":"element","tag":"h3","props":{"id":"問題描述describe-the-problem"},"children":[{"type":"text","value":"問題描述（Describe the problem）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果好的標題是一個好的開始，那麼問題簡述就是把這個好的開始延續下去。標題通常必須一句話簡述整個異常的輪廓，那問題描述就是把異常的細節描繪出來。標題中省略的細節、脈絡，或是你對這個問題的觀察和看法，都可以在這裡好好詳述。若同樣以路燈為例，那大概就是："}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"南區台中路上靠近二二八公園處有路燈壞了，它時不時在閃爍。這附近只有這個路燈有異常現象，其他路燈都是好的，該路燈的編號是 641549 。看它的桿身似乎有被撞擊過的痕跡，或許是最近被車輛擦撞過導致線路異常？我沒有很確定。詢問過附近的居民，似乎在前天還是好的。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在這個例子，可以看到除了標題所提到的資訊外，還多了許多來自於回報者的觀察，讓我們可以有更多資訊的得以除錯。"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"異常描述：閃爍"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"同型比較：和其他路燈相比"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"產品資訊：路燈編號"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"額外表徵：被撞擊過的痕跡"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"個人推斷：或許是被擦撞過導致線路異常"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"其他資訊：詢問居民"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"用路燈來描述可能還是有點籠統，很難和實際程式做聯想結合，這邊改以登入發生錯誤的情境作為舉例："}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"用帳號密碼登入後，會跳到顯示 We’re sorry, but something went wrong 的畫面"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"輸入帳號密碼登入後沒有跳到正常頁面，而是顯示錯誤訊息的頁面（異常描述），出現錯誤訊息的網址是 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"https://xxx.xxx.xxx/ooo?a=aaa&b=bbb"}]},{"type":"text","value":"（產品資訊）。其他頁面似乎都正常，透過社交平台登入的功能也正常（同型比較）。不管輸入的帳號密碼是否正確都會報錯。我不知道發生什麼事，會不會是帳號密碼驗證的程序出錯？因為社交平台登入是正常的（個人推斷）。問過朋友，他們使用帳號密碼登入也有同樣的異常。有朋友說早上七點時還是正常的（其他資訊）。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"當然，這些特徵與資訊項目都只是舉例，每個專案或情境可以提供的資訊類型都不相同，但希望這樣舉例能讓讀者們稍微了解「問題描述」與「標題」的差異，以及有什麼細節是可以提供的。"}]},{"type":"element","tag":"h3","props":{"id":"重現步驟steps-to-reproduce"},"children":[{"type":"text","value":"重現步驟（Steps to reproduce）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"重現步驟就是指經過哪些動作後，就一定會引發這個異常。這是讓開發者代入異常發生情境很重要的資訊。如果沒有提供重現步驟，開發者就要耗費更多時間去分析到底發生了什麼事，然後嘗試要如何重現，能將異常重現後才能開始進行除錯。如果直接提供重現步驟，那開發者就能直接面對異常，然後依照他的經驗快速除錯。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有重現步驟的異常回報，也容易使回報者和開發團隊站在同一個視角，而不是使用者一直在幹譙，然後開發團隊只能不斷道歉，卻還是找不到異常發生的原因，或是直接丟給使用者「這在我電腦是正常的！（It works on my computer!）」交差了事。當開發團隊非常努力想透過回報者的描述去重現異常，卻一直失敗時，面對回報者的催促，有可能會產生負面情緒，認為回報者是來鬧的，畢竟在兩者的觀點上，對方描述的事情都是沒發生過的呀！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若是該異常無法百分之百重現，也要在這裡特別講明。儘管沒有一個肯定能重現的步驟，但仍可以試著把可能會發生異常的步驟寫出來，讓開發者了解到底再發生這個異常前，會經歷過什麼事，導致有機率觸發異常。回報者也需要有著「在沒有有永遠能重現異常的步驟時，這個議題可能會需要耗費較長時間除錯」的心理準備。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"好的重現步驟在於一個指令一個步驟，先以上節提到的登入異常為例，大致如下："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"進入網站（"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"https://www.xxxx.tw"}]},{"type":"text","value":"）。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"點擊首頁右上方的「登入」按鈕。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"再登入表單中輸入帳號密碼。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"點擊表單中的「送出」按鈕。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"發生異常。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"雖然這個例子這個重現步驟看起來似乎沒提供到什麼資訊，但某種層面上卻也讓開發者知道使用者是用合理的方式去進行登入，可以排除是非預期的行為模式導致異常發生。透過這樣一個指令就寫一個步驟的，讓開發者了解實際的行為模式，也讓開發者依照這樣的步驟執行時，能夠代入使用者的情境。若是開發者在執行步驟時是正常的，就可能會往是不是環境或版本的不同造成結果差異的方向去想，而不是不斷在程式碼中鑽牛角尖。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若回報者在使用產品時，有了一些非預期行為是開發者當初沒有想到的，就可以讓開發者不被既有的觀點束縛，突破盲點而瞭解錯誤的原因。畢竟我們都知道，身為開發者去執行一些情境，都一定會預設我們心中已經非常熟悉的合法步驟，而不會意識到有其他非預期行為的可能。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外，若是能夠在每個步驟都附上畫面截圖，也會減少對步驟執行的誤解，並透過畫面提供了回報者可能沒意識到的額外資訊。"}]},{"type":"element","tag":"h3","props":{"id":"預期行為what-i-expected"},"children":[{"type":"text","value":"預期行為（ What I expected）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"預期行為就是指當我們透過「重現步驟」操作時，我們預想中理應該出現的行為、結果、狀態。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"預期行為在於讓開發團隊暸解我們心中認為正常的認知是否與當初產品設計時相同，讓兩方在這方面的資訊是對稱的。在產品設計時，難免會有產品的行為與使用者的預期行為不同的情況，使用者會因為這種情況認定是程式發生異常，進而回報。但事實上，程式並沒有問題，只是當初產品設計時在使用者經驗（UX）的決策不夠理想，或是設計概念比較新穎，使用者和市場並還沒被教育過。所以若能知道使用者預期行為，就能避免把時間成本耗費在處理其實不是異常的回報中，而能讓客服先將這部分的回報篩選掉，讓開發團隊得以專注在真正的異常回報中。"}]},{"type":"element","tag":"h3","props":{"id":"實際行為what-happened-instead"},"children":[{"type":"text","value":"實際行為（What happened instead）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"實際行為就是指當我們透過「重現步驟」操作時，實際發生行為的描述，通常也就是對異常的描述。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"與預期行為同理，這部分的描述能讓開發團隊暸解我們實際遇到的情況，並透過是否與產品設計相符或相異去進一步判斷發生什麼事。排除設計和使用這預期行為的非異常回報，這部分的資訊就是讓開發團隊搭配重現步驟去分析重要描述。與「問題描述」相似，但如同「問題描述」是「標題」的進一步說明，那「實際行為」就是「問題描述」中，關於異常更詳細的描述。"}]},{"type":"element","tag":"h3","props":{"id":"影像screenshot-video"},"children":[{"type":"text","value":"影像（Screenshot / Video）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"影像的部分是比較選擇性提供的資訊，包括螢幕截圖和操作的實際錄影。有時候這些資訊會直接在其他章節中提供，像是在重現步驟中，每步驟提供一個螢幕截圖、或是在實際行為中，把看到的情況截圖附上。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"影像是更真實的記錄，讓開發團隊若是對我們所描述的文字仍有點困惑時，能透過影像去暸解我們實際想表達的。或是如重現步驟中所說，透過畫面可以補足我們沒有意識到是有用處的資訊，但對開發者團隊來說是關鍵的細節。"}]},{"type":"element","tag":"h3","props":{"id":"環境environments"},"children":[{"type":"text","value":"環境（Environments）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"環境的部分是指程式運作的環境，舉凡作業系統、瀏覽器、相依函示庫等等，各家產品和版本都可能會影響程式的運作。這部分亦是很著要的資訊，其重要性不亞於版本、重現步驟等描述。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"環境資訊讓開發團隊在進行判斷時，可以先暸解異常會不會有可能只是環境造成的落差，而不是程式核心邏輯的錯誤，如此才能朝正確的方向進行異常排除。程式在開發時，很難保證在所有環境都能行為一致，尤其是網頁程式，在常見的四大瀏覽器（Chrome, Firefox, Safari, IE）的顯示可能都有細節的差異，甚至在同一種瀏覽器，在不同版本都會有不同。像是 IE 系列，在 6 ~ 11 的差異都滿大的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"有時候程式可能會被執行的環境太多種，開發團隊沒有太多成本一一測試與驗證，或是為了支援太舊環境的成本太高，所以決定不再適用。但是就算開發團隊有在產品某處或者安裝程式提及，使用者不一定會知道這些訊息（忽略說明訊息），導致誤以為程式出了異常，但事實上只是該環境已經不被支援，或是不在驗證過的支援清單中。若有此資訊，就可以在客服階段就先為使用者解惑，減少處理時間與成本。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若是該環境是在程式認定的支援清單中，開發團隊也能搭配重現步驟快速了解狀況，並透過交叉比對去判斷是核心邏輯的錯誤，還是環境支援沒有完善。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以下提供比較常見的環境資訊："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"作業系統：Windows, Mac OS X, Android, iOS, Win10 Mobile"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"瀏覽器：Chrome, Firefox, Safari, IE, MS Edge, Opera 15+, Android Browser"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在提供這類資訊，除了環境名稱與主要版本號外，建議透過說明或者關於的資訊，取得比較詳細的版本號一併附上，會對開發團隊更有幫助。"}]},{"type":"element","tag":"h3","props":{"id":"脈絡或程式碼context-source"},"children":[{"type":"text","value":"脈絡或程式碼（Context / Source）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這部分又稱最小可重現模型（Minimal reproduction），比較偏向當產品是開發用的函式庫、框架時，會需要使用這個產品的開發者提供，而不是一般使用者。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"當我們使用某個函式庫、套件或框架時，若遇到異常，除了上述的資訊外，若能提供程式碼給產品的開發團隊去暸解，一定會更有幫助。但是我們也不能把我們自己產品的程式碼完全給開發團隊，一來可能是會有商業考量，這些程式碼是公司資產，不得任意外洩、二來是開發團隊也沒有時間和義務幫看你的產品的原始碼。這時候就需要針對發生異常的部分，實作最小可實現模型，不包含其他核心邏輯，純粹只有使用他們產品時的程式碼，越簡單且能重現異常越好。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而在實作小可實現模型時，也算是再次確認。我們自己在開發產品時，會由各種邏輯混雜在一起，若是架構沒設計好，很有可能就會互相影響。透過實作最小可重現模型，讓我們能夠排除是其他程式碼間接造成異常的可能性，而能聚焦該產品發生異常的原因與位置。"}]},{"type":"element","tag":"h3","props":{"id":"備註additional-details"},"children":[{"type":"text","value":"備註（Additional details）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"只要是不屬於本章中所提到的任何項目，但認定可能會對開發團隊排除異常有幫助的資訊都可以寫在這部分。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"像是這個異常沒辦法百分之百重現，甚至連重現步驟都難以確立，就可以在這邊加註。或是這個功能在以前都沒有發生過異常，是在某個版本後才故障。或是我們認為以我們的專業知識，能夠協助開發團隊排除異常，也可以在這邊寫下我們的看法。諸如此類。"}]},{"type":"element","tag":"h2","props":{"id":"困境"},"children":[{"type":"text","value":"困境"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在前一章我們知道了哪些資訊應該在回報問題時附上，得以讓開發團隊善用該資訊儘速給予答覆或是除錯。但現實總是殘酷的，不見得所有的使用者都會知道這些要附上這些資訊，就算知道也不一定會勤於每次回報問題時都附上，講句難聽的，商業軟體有問題是開發團隊該負責的，使用者願意回報就已經是願意幫忙的，如果還要求每次都要制式風格回覆，不見得使用者都願意配合。（開源生態另當別論，開源生態是作者願意開發程式碼並開源提供給公眾使用已經仁至義盡了，並沒有義務要不斷維護。）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"要讓使用者願意回報完整的資訊給開發團隊，比較直接的作法就是在填寫回報的表單裡提供完整的資訊，讓使用者能夠了解有什麼資訊是開發團隊需要的、該怎麼取得那些資訊，而避免直接丟一個空白的文字框要求使用者自己填寫，填寫後又以提供資訊不足拒絕受理。若是透過 Github、Gitlab 管理問題回報，可以透過 Issue Template 的功能去自訂問題回報時，文字框預設會出現哪些資訊，這部分將在下一章提及。另外也可以在如前面陸續有在提及的，請客服和使用者溝通，協助使用者提供該資訊，透過此方法，就是要對客服做相關知識的教育訓練。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外，若是在自家團隊或是開源專案，頻繁遇到內部人員在回報問題時，不遵守培訓或是表單提供的格式回報問題，不應該遷就接受，而是制定一個固定的時間（例如一到三天），在這個時間沒有改善，就直接關閉、封存該回報，不予受理。在這類議題，比較常遇到的就是業務或是客服無心遵守，認為自己的描述已經夠清楚了，而不願意再多耗費時間協助提供完整的資訊。或是工程師認為自己只是先輸入個關鍵描述，之後「自己」會再處理，不用那麼繁瑣再輸入。但通常結果都是開發團隊並不了解那些不完整的資訊是在填寫什麼問題，或是最後那個異常的處理者不是回報的工程師了，導致這個回報到最後並沒有提供它該有的幫助，反而成為異常清單中想移除卻又不敢移除的臭石頭。所以，打從最初就規定沒有符合規格的異常回報不受理，對於內部團隊是一個必須的措施。別把回報時的偷懶，連本帶利的變成開發團隊要代償的債務。"}]},{"type":"element","tag":"h2","props":{"id":"輔助"},"children":[{"type":"text","value":"輔助"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在上一章有提到 Issue Template 可以協助我們自訂回報異常時的格式，本章將介紹在 GitHub、GitLab 這兩大開發者常用的程式碼託管與專案管理平台來如何善用此功能。"}]},{"type":"element","tag":"h3","props":{"id":"github-issue-template"},"children":[{"type":"text","value":"GitHub Issue Template"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GitHub 文件中的 "},{"type":"element","tag":"a","props":{"href":"https://help.github.com/articles/helping-people-contribute-to-your-project/","rel":["nofollow"]},"children":[{"type":"text","value":"Helping people contribute to your project"}]},{"type":"text","value":" 有提到許多關於如何協助其他人貢獻自己專案的一些方法，其中 "},{"type":"element","tag":"a","props":{"href":"https://help.github.com/articles/creating-an-issue-template-for-your-repository/","rel":["nofollow"]},"children":[{"type":"text","value":"Creating an issue template for your repository"}]},{"type":"text","value":" 就有提到如何自訂 Issue Template。本節稍微摘自裡面重要的流程在此說明。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GitHub 的 Issue Template 是透過在**預設分支（defaut branch）**中，建立一個名為 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"issue_template.md"}]},{"type":"text","value":"（大小寫皆可）的檔案來設置，並可以選擇放置在可見的專案根目錄下、docs 目錄底下、或是隱藏的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".github"}]},{"type":"text","value":" 目錄底下。除了 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"md"}]},{"type":"text","value":" 以外，亦可以以 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"txt"}]},{"type":"text","value":" 為副檔名。"}]},{"type":"element","tag":"h3","props":{"id":"gitlab-issue-template"},"children":[{"type":"text","value":"GitLab Issue Template"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"GitLab 文件中的 "},{"type":"element","tag":"a","props":{"href":"https://gitlab.com/help/user/project/description_templates.md","rel":["nofollow"]},"children":[{"type":"text","value":"Description templates"}]},{"type":"text","value":" 有提到如何自訂 issue 和 merge request 描述的樣板。本節稍微摘自裡面重要的流程在此說明。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和 GitHub 相同，GitLab 也是透過在預設分支下建立檔案來設置 Issue Template。不同的是，GitLab 強制要求要以 Markdown 語法編寫，且必須放置在 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".gitlab/issue_templates/"}]},{"type":"text","value":" 目錄底下，檔案名稱即為樣板名稱，一個專案可以同時存在多種樣板，例如異常回報可以取名為 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Bug.md"}]},{"type":"text","value":"，我們也可以針對異常的種類再去做更詳細的分１類。目前 GitLab Free 方案或是 CE 版，並沒有提供設置"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"預設"}]},{"type":"text","value":"樣板的功能。"}]},{"type":"element","tag":"h3","props":{"id":"使用要點"},"children":[{"type":"text","value":"使用要點"}]},{"type":"element","tag":"h4","props":{"id":"在開頭前先附上說明文字"},"children":[{"type":"text","value":"在開頭前先附上說明文字"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在樣板的開頭，就把回報異常應注意哪些事項的說明寫上，讓回報者一定會看到這些描述也是個不錯的方式。TensorFlow 的 "},{"type":"element","tag":"a","props":{"href":"https://raw.githubusercontent.com/tensorflow/tensorflow/master/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"Issue Template"}]},{"type":"text","value":" 就在開頭把說明講得很清楚。"}]},{"type":"element","tag":"h4","props":{"id":"透過-html-註解語法對回報者說明"},"children":[{"type":"text","value":"透過 HTML 註解語法對回報者說明"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由於 Markdown 是有支援 HTML 語法的，所以理當可以使用 HTML 的註解語法。我們就可以善用這個特性，將想要對回報者說但不想在回報後顯示在頁面的話，透過註解語法包覆起來。像是："}]},{"type":"element","tag":"code","props":{"code":"<!--\n在最上面寫上回報時應該要注意那些事項\n....\n-->\n\n## 項目一\n<!--- 描述這個項目的意思，或是該如何取的這個項目的資訊 -->\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!--\n在最上面寫上回報時應該要注意那些事項\n....\n-->\n\n## 項目一\n<!--- 描述這個項目的意思，或是該如何取的這個項目的資訊 -->\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Webpack 的 "},{"type":"element","tag":"a","props":{"href":"https://raw.githubusercontent.com/webpack/webpack/master/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"Issue Template"}]},{"type":"text","value":" 就有善用此特性。"}]},{"type":"element","tag":"h4","props":{"id":"將所希望的回報格式先填好"},"children":[{"type":"text","value":"將所希望的回報格式先填好"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果我們希望使用者在填寫重現步驟時，能使用有序條列的方式表達，那我們就可以在該節先將有序清單的 Markdown 語法寫上；如果我們希望使用者在貼上程式碼或是程式輸出的訊息時，能用程式碼區塊包覆起來，我們就可以將相關語法也先寫上。諸如此類，舉例來說就像這樣："}]},{"type":"element","tag":"code","props":{"code":"**這個異常的重現步驟**\n1.\n2.\n3.\n\n**當你輸入 `echo $PATH` 後所輸出的訊息**\n\n~~~txt\n(paste your output here)\n~~~\n\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"**這個異常的重現步驟**\n1.\n2.\n3.\n\n**當你輸入 `echo $PATH` 後所輸出的訊息**\n\n~~~txt\n(paste your output here)\n~~~\n\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這部分可以參考 Moby 的 "},{"type":"element","tag":"a","props":{"href":"https://raw.githubusercontent.com/moby/moby/master/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"Issue Template"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"h2","props":{"id":"結語"},"children":[{"type":"text","value":"結語"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Issue Description 的部分講到這邊算是告一段落。希望讀者們能透過此主題的文章暸解回報異常時，需要回報哪些資訊，以及其背後的原因。並且能夠將相關知識再轉達給你身邊的工程師、客服、與使用者，讓彼此在溝通上能夠更加順暢，留下更多有效益的回報清單，而不再是一堆想刪又不敢刪議題的尷尬局面。"}]},{"type":"element","tag":"h2","props":{"id":"參考資料"},"children":[{"type":"text","value":"參考資料"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/laravel/framework/blob/5.5/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · laravel/framework · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/twbs/bootstrap/blob/v4-dev/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · twbs/bootsrap · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/angular/angular/blob/master/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · angular/angular · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/graphql/graphql-js/blob/master/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · graphql/graphql-js · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/rails/rails/blob/master/.github/issue_template.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · rails/rails· ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/crystal-lang/crystal/blob/master/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · crystal-lang/crystal · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/moby/moby/blob/master/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · moby/moby · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/tensorflow/tensorflow/blob/master/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · tensorflow/tensorflow · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/webpack/webpack/blob/master/.github/ISSUE_TEMPLATE.md","rel":["nofollow"]},"children":[{"type":"text","value":"GitHub · webpack/webpack · ISSUE_TEMPLATE.md"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://new-issue.vuejs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Vue.js Issue Helper"}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"section","props":{"className":["footnotes"],"dataFootnotes":true},"children":[{"type":"element","tag":"h2","props":{"id":"footnote-label","className":["sr-only"]},"children":[{"type":"text","value":"Footnotes"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{"id":"user-content-fn-1"},"children":[{"type":"text","value":"除了此兩種外，還有一種類型容易被當作議題，但事實上是不建議提交在議題追蹤工具，那就是使用上的疑惑（usage question），這類型的議題通常建議先讀相關文件、使用者手冊、觀看影片教學、在論壇、社群、通訊平台上發問。如果是商業產品，則應該由客服處理，而不是丟給研發工程師。  "},{"type":"element","tag":"a","props":{"href":"#user-content-fnref-1","ariaLabel":"Back to content","className":["data-footnote-backref"],"dataFootnoteBackref":true},"children":[{"type":"text","value":"↩"}]}]},{"type":"element","tag":"li","props":{"id":"user-content-fn-2"},"children":[{"type":"text","value":"bug 這個詞是比較口語的用法，通常會泛指 defect、error、fault 等，程式上看起來出錯或有異常的現象、行為。在翻譯上比較口語的情境我會使用「問題」作為對應，而在比較書面的情境我會使用「異常」作為代表。畢竟「問題」這個詞太過廣義，有可能是指 bug，也有可能是指 question，而「異常」則狹義的多（在中國社群，可能會另指 exception）。當然，平時在聊天時，大家還是繼續說 bug 唄。 "},{"type":"element","tag":"a","props":{"href":"#user-content-fnref-2","ariaLabel":"Back to content","className":["data-footnote-backref"],"dataFootnoteBackref":true},"children":[{"type":"text","value":"↩"}]}]},{"type":"element","tag":"li","props":{"id":"user-content-fn-3"},"children":[{"type":"text","value":"通常「症」指的是疾病的徵象，「病」才是問題起源。  "},{"type":"element","tag":"a","props":{"href":"#user-content-fnref-3","ariaLabel":"Back to content","className":["data-footnote-backref"],"dataFootnoteBackref":true},"children":[{"type":"text","value":"↩"}]}]}]}]}]},"title_en":"How to describe a bug report","slug":"how-to-describe-a-bug-report","aliases":["如何敘述異常回報","How to describe a bug report"],"created_at":"2018-06-02T10:58:10.000Z","published_at":"2018-06-02T10:58:10.000Z","updated_at":null,"tags":["ithome-ironman","issue","bug"],"moc":["Information Technology"],"_type":"markdown","_id":"garden:articles:2018-06-02-how-to-describe-a-bug-report.md","_source":"garden","_file":"articles/2018-06-02-how-to-describe-a-bug-report.md","_extension":"md"},{"_path":"/legacy-articles/2013-12-04-recommendation-experience-of-master-of-software-engineering","_dir":"legacy-articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"國立中央大學軟體工程研究所推甄心得","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/152/","rel":["nofollow"]},"children":[{"type":"text","value":"Site is undergoing maintenance"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本文採用"},{"type":"element","tag":"a","props":{"href":"https://goo.gl/TwbVOk","rel":["nofollow"]},"children":[{"type":"text","value":"CC授權 姓名標示─非商業性─禁止改作 3.0 台灣"}]}]},{"type":"element","tag":"h5","props":{"id":"2016-11-30-補充"},"children":[{"type":"text","value":"2016-11-30 補充："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"中央大學從我那屆進去時早就沒有軟體工程研究所了，應該正名為國立中央大學資訊工程學系軟體工程碩士班。在這邊補充，就不另外修改標題了。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"目前軟工碩士班推甄的複試已經改成仿業界的闖關面試，不再是上機考了，所以本篇心得的參考價值已經失效了。請另外搜尋 2015 年（含）後的推甄心得。"}]}]},{"type":"element","tag":"h2","props":{"id":"緒論"},"children":[{"type":"text","value":"緒論"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"國立中央大學軟體工程研究所（簡稱軟工所）今年第一次嘗試以上機考為主的推甄方式，且不看重課業成績，這不但意味這造福原本是資工系會 Programming 但課業成績不佳的同學，更為大學讀非本科系卻對資訊有濃厚興趣的學生開拓的一條路，敝人就是此次考試的受惠者，因為要感謝的人太多，所以只好藉由發心得文給未來想參加此考試的同學參考，作為回報。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"關於本次考試說明可以參考："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"COSCUP 2013 Lighting Talk: "},{"type":"element","tag":"a","props":{"href":"https://goo.gl/Rn44Xj","rel":["nofollow"]},"children":[{"type":"text","value":"http://goo.gl/Rn44Xj"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"軟工所粉絲專頁： "},{"type":"element","tag":"a","props":{"href":"https://goo.gl/JqdHdb","rel":["nofollow"]},"children":[{"type":"text","value":"http://goo.gl/JqdHdb"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"強者的心得文參考："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Pioneerlike："},{"type":"element","tag":"a","props":{"href":"https://goo.gl/mKmqbb","rel":["nofollow"]},"children":[{"type":"text","value":"http://goo.gl/mKmqbb"}]},{"type":"text","value":" （#1IcBND8r (graduate) @ PTT ）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"0w0："},{"type":"element","tag":"a","props":{"href":"https://goo.gl/Oq7D34","rel":["nofollow"]},"children":[{"type":"text","value":"http://goo.gl/Oq7D34"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以上強者有敘述過的部分我就儘量不重複了，他們心得寫的很好，已經不需重新闡述，所以我會著重在從實務經驗較多的同學的角度去做心得分享。"}]},{"type":"element","tag":"h2","props":{"id":"關於我"},"children":[{"type":"text","value":"關於我"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"國立中興大學歷史系，系排 85.5%，無輔系、雙主修，修過資工系幾堂課。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"國立文華高中 中區資訊能力競賽(無得名) / BBS 校站 NF 創站長 / 電研社社長 *"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"國立中興大學 學生會資訊長 / 圖書館網頁工讀生"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"2013全國⼤大專校院開放軟體創作競賽 佳作 / Indie Speed Run 2013 / g0v.tw hackath5n"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"報考 40 名，取 11 名，正取10"}]}]},{"type":"element","tag":"h2","props":{"id":"關於推甄"},"children":[{"type":"text","value":"關於推甄"}]},{"type":"element","tag":"h3","props":{"id":"誰適合報名who-is-object"},"children":[{"type":"text","value":"誰適合報名？（Who is Object?）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"正如 pioneerlike（後簡稱 p9e ）所言：『「只寫過網站」的同學不太適合參加本次推甄』，但不必沮喪，這不代表這類人要放棄參加推甄，反而要利用這項經驗去發展。像是敝人就是偏向網站開發的類型，與P大比起來，敝人在程式競賽（ACM-like）的經驗是比較缺乏的，比較常觸碰的是專案開發與維護的部分，也算是比較偏向網站開發的同學，但仰賴高中維護過 BBS 站（Maple-Itoc，純 C 寫成）與簡單的資訊競賽的經驗，對於 C 語言有所了解，但和競賽比起來，走的是不太一樣的方向。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"也就是說，你不一定需要透過 ACM、CPE 等資訊競賽的路線，只要是對專案開發有興趣的同學，可以嘗試用 C、C++、Java 等，開發一項專案，去了解軟體程式設計和網頁程式設計的不同，以及其中的思考邏輯，會對你幫助很大。比起一般人，你們擁有網頁開發的基礎，要跳入這塊應該是比較容易的。"}]},{"type":"element","tag":"h3","props":{"id":"第一階段備審資料"},"children":[{"type":"text","value":"第一階段：備審資料"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"正如 p9e 和 0w0 所說，成績在這個階段不是重點。他們系排都在 50% 左右，而敝人甚至是非相關科系的，備審資料要求填寫的科目分數，一概沒有修過，但這階段的分數仍然有 8X，可以做在校成績所占比重不高的最大驗證。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"和 p9e 不同的，我想強調這階段的重點是代表作。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"雖然敝人在高中曾在校內資訊競賽拿到第一名，但到了中區後仍然慘當炮灰。在大學時也未曾參加過 CPE，所以我認為 CPE 應該不是唯一重點。而我走的正是另一條路，我寫過許多小作品，雖然不是很強大，但至少都是一個可以獨立運作的（網頁）程式，且都附在備審資料中。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而為了這次推甄，我把以前的思考已久的想法用網頁程式實作出來，當作代表作與備審資料共同交出去。而在第二階段考試開始前，考試老師也說他們有請研究生幫忙把每個報考生的作品試跑過，看能不能正常運作。所以我想只要寫個能正常運作的作品，附上安裝或使用說明，這階段的分數都能有80上下。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"複習並總結一下，因為本次推甄的重點是上機考，所以這階段是不會刷掉任何人，只有分數的差異（大概 10 ~ 15 分），如果你有上傳能正常運作的代表作，分數應該都會有不錯的表現。"}]},{"type":"element","tag":"h3","props":{"id":"第二階段上機考"},"children":[{"type":"text","value":"第二階段：上機考"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"今年上機考考了七題，題型說明，p9e 和 0w0 都說得差不多了，我一樣儘量不重複他們所說過的部分。想要了解詳細的同學，可參考 p9e 的心得，他寫的很清楚。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而我把它分為四題簡單題（1, 2, 3, 5）與三題複雜題。但這是根據敝人的實力所做的判斷啦ＸＤ。搞不好有人覺得全部都很簡單之類的。但我會這麼做憑據的是，四題簡單題只要了解 key point 時，不用十五分鐘就可以解決（甚至不用三分鐘），敝人在四題簡單題所花的時間大概占整個考試時間的 1/3 左右。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"建議習慣開發專案的同學，在上機考前，至少在兩個禮拜之前，能到比較著名的 Online Judge 系統去做練習。或許有同學會問，前面不有大大說是偏向考資訊科學、業界實作而不是 ACM 嗎？Indeed～ 但在這邊的練習是去熟悉 online judge 的模式，還有怎麼在限定時間內去解出最多的題數，這會在你上機考時讓你較為從容，比較知道怎麼掌握節奏。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而練習這類題目有一個好處，就是每題通常會有一個需要你去解決的key answer，透過解題能讓你快速熟悉許多技巧。當解題完成後，可以在思考有什麼更好的寫法。如果經濟允許，可以去買些競賽相關的書籍，去理解有哪些技巧是常被題目所用到的。敝人考前就買了一本對岸出版的《 ACM 程序設計》，對我這次考試幫助很大。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最後，在程式語言的部分，會希望你能至少掌握 C 與 C++ 的基本技巧，尤其是 C++ 物件導向和 STL 的部分，敝人原本是只會C語言而已，但認為這種競賽會重視物件導項相關概念，所以在考試前兩個禮拜之前開始研讀 C++，結果很幸運的，幾乎所有題目都可以用 C++ 去解，這也是讓敝人得以正取的關鍵之一。當然，你也可以靠Java打遍所有題目，但仍然建議你，至少要能讀懂 C++ 的語法，這樣若題目規定你必須要用 C++ 編寫時，才不會愣在那裡。至於在使用 Java 參加上機考的相關問題與經驗，可以私下詢問 p9e，我想他會很樂意分享的。"}]},{"type":"element","tag":"h2","props":{"id":"ending"},"children":[{"type":"text","value":"Ending"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"很幸運的能在今年考研究所的時候，中央大學軟工所開放了這樣考試方式。讓敝人得以從歷史系的身份，成功考取資訊相關的研究所，在以前相關系所只要看到文學院，90% 都會直接刷掉的。當然這不代表說資工系廉價，連歷史系都能考上相關研究所的意思。敝人在大學四年中，也花了許多時間在資訊上的研讀，包括程式語言的練習、接案子，參加有興趣的Conference，把握機會參加競賽與社群，這都是讓一個非本科系的學生能夠累積基礎的管道。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我想要說的是，如果身在非資訊相關科系卻對資訊有著濃厚興趣的夥伴（很多原因會產生這種結果，不多贅述），不要放棄你對資訊的渴望，好好在課餘時間去多結交資訊背景的朋友，大家一起討論、分享相關訊息、參加活動，接個案子、多寫專案，慢慢累積實力，到了大四，就來嘗試中央軟工所吧！我想這是對我們這類人，敞開的另一扇大門與歸途。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最後，資訊科學的基本學科，還是要在入學前儘量掌握。敝人已經打算在下學期只有九學分的生活，好好研讀作業系統、資料結構、演算法等，展開另一趟有趣的學習之路。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我的分享大概就是這樣。也在漢敝校系主任討論過後，"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n之後可能會再寫一篇鼓勵學弟妹多多實作的心得延伸，到時候會再分享出來。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n有什麼問題，也歡迎寫信給我："},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"fntsrlike+ptt [at] gmail.com"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"祝所有對資訊領域有興趣的夥伴，皆能在這類考試中得到肯定。"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nJust do it, hack for fun."}]}]},"title_en":"Recommendation Experience of Master of Software Engineering","slug":"recommendation-experience-of-master-of-software-engineering","aliases":["國立中央大學軟體工程研究所推甄心得","Recommendation Experience of Master of Software Engineering"],"created_at":"2013-12-04T16:37:30.000Z","published_at":null,"updated_at":null,"tags":[],"moc":["General"],"_type":"markdown","_id":"garden:legacy-articles:2013-12-04-recommendation-experience-of-master-of-software-engineering.md","_source":"garden","_file":"legacy-articles/2013-12-04-recommendation-experience-of-master-of-software-engineering.md","_extension":"md"}]