[{"_path":"/legacy-articles/2016-02-15-from-jekyll-to-wordpress","_dir":"legacy-articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"從 Jekyll 遷移至 WordPress","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/","rel":["nofollow"]},"children":[{"type":"text","value":"從 Jekyll 遷移至 WordPress - 深藏若虛"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"。這段時間雖然沒發文，卻也是有在做部落格的更新，主軸就如標題所述，將部落格的系統從靜態網站產生器的 Jekyll 移至 WordPress。原因就如"},{"type":"element","tag":"a","props":{"href":"https://www.facebook.com/permalink.php?story_fbid=1717797918453517&id=100006699756364","rel":["nofollow"]},"children":[{"type":"text","value":"去年 12 月的 Facebook 貼文"}]},{"type":"text","value":"所述，主要是圖片管理不易。雖然 "},{"type":"element","tag":"a","props":{"href":"https://www.facebook.com/xdite","rel":["nofollow"]},"children":[{"type":"text","value":"XDite"}]},{"type":"text","value":" 創辦的 "},{"type":"element","tag":"a","props":{"href":"http://logdown.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Logdown"}]},{"type":"text","value":" 的確在這部分做得很好，但 "},{"type":"element","tag":"a","props":{"href":"http://logdown.com/","rel":["nofollow"]},"children":[{"type":"text","value":"Logdown"}]},{"type":"text","value":" 也如創辦人自己所述是疏於經營的，讓我對他的信心不高XD。"},{"type":"element","tag":"a","props":{"href":"https://www.facebook.com/wake.gs","rel":["nofollow"]},"children":[{"type":"text","value":"Wake"}]},{"type":"text","value":" 推薦的方式挺有趣，但最近實在沒時間投入一個成熟度不高且又要多項服務自己整合的方式 Orz。所以決定還是回到以前碰過 WordPress 作為部落格的基底。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"對於部落格系統、服務使用歷程大概是："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Pixnet"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Blogger"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"WordPress + VPS"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Octpress + Github"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Jekyll + Github"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"WordPress + Docker on VPS"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"繞了一圈，還是回到 WordPress，這個結果也是挺讓人啼笑皆非的。不過這些年來 WordPress 的確是也變滿多的，介面上、客製化、外掛數量等。而且有了 Docker 後，在架設與部署上對環境的規劃時間也減少了，耗費了一段時間去重新投入這塊，本篇主要就是在講述從 Jekyll 遷移到 WordPress 的歷程，包括了主題客製化（Theme Customize）的開發、漢字標準格式的整合、外掛（Plugin）、環境部署與架設幾個部分。"}]},{"type":"element","tag":"h5","props":{"id":"目錄"},"children":[{"type":"text","value":"目錄"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"WordPress 的改變"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"主題客製化"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"漢字標準格式"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"外掛（Plugin）"},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Jetpack 由 WordPress.com 團隊開發"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Crayon Syntax Highlighter"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"UpdraftPlus – Backup/Restore"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"環境部署與架設"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"結語"}]}]},{"type":"element","tag":"h2","props":{"id":"wordpress-的改變"},"children":[{"type":"text","value":"WordPress 的改變"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這裡的改變不是指 WordPress 近年改變的觀察，畢竟是我沒有一直關注這個社群，而是指自己很久以前接觸 WordPress 到現在重新接觸後，感受變化特別多的部分。但其實我也久沒使用 WordPress 了，有種我是在使用一個新的 CMS 的感覺XD。也聽說最近幾年 WordPress 已從一個 Blog System 演化成一個成熟的 CMS 了呢。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最直觀的改變大概就是管理後台的介面吧。會想從靜態網站產生器換到 WordPress 無非就是希望管理上能更加簡易、直觀和自動，有一個簡潔、美觀的後台的確是挺對我的胃口的。值得一提的是 WordPress 的後台也有支援 RWD 的瀏覽，或許之後可以用平板做簡單的管理。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-15-下午8.12.13.png]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另一個比較友善的部分，系統、外掛與主題若有更新，後台都會提醒你，讓你手動去更新。說是手動，事實上也就是一鍵更新，不用其他的操作XD，雖然很多人都說 WordPress 可能資安漏洞比較多，但是有發現的漏洞官方應該都會迅速更新補上，並提醒使用者可更新，我覺得至少減輕了在資安上的不少疑慮。當然，若要和靜態網站產生器的部落格比起來，是不可能沒有漏洞的，這部分就看個人的平衡點和抉擇了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-15-下午8.19.48.png]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 WordPress 進階功能的補足上，官方也有推出一個外掛叫做 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/jetpack/","rel":["nofollow"]},"children":[{"type":"text","value":"Jetpack"}]},{"type":"text","value":"，一次幫你補充滿多後台的功能。在寫作與閱讀上，比較讓我注重的就是有"},{"type":"element","tag":"a","props":{"href":"https://en.support.wordpress.com/markdown-quick-reference/","rel":["nofollow"]},"children":[{"type":"text","value":"提供 Markdown 語法的支援"}]},{"type":"text","value":"（對，就算換到 WordPress 我還是離不開 Markdown。 XD)，以及能使用 Latex 語法去加入較美觀的數學式，再來就是也有提供許多媒體或社交網站的 Shortcode Embeds，讓內嵌 Facebook 的發文、Instgram 的照片、Youtube 的影片、SlideShare 的簡報更加的方便。這些寫作上的方便性也算是拉近了 WordPress 與 Logdown 的差異，也算是我願意回到 WordPress 的原因之一。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比較可惜的是，儘管在寫作上多了不少進階功能，甚至提供了 Markdown 語法，但在程式設計師最關注的程式碼上色仍沒有實作。"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/#fn-259-1","rel":["nofollow"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"雖然能理解這不是一般使用者的必備需求，但是多少還是有點遺憾。不過還好在 WordPress 社群中已經有不少程式碼上色的外掛創作，我會在後面的章節提到我是如何實作這個需求。"}]},{"type":"element","tag":"h2","props":{"id":"主題客製化theme-customize"},"children":[{"type":"text","value":"主題客製化（Theme Customize）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一開始要投入這塊時，在網路上一直找不到一個有系統的整裡，直接去去看官網的文件，也比較偏向工具書，沒辦法以比較快速的途徑帶過整體概念。所幸後來找到了 "},{"type":"element","tag":"a","props":{"href":"http://fundesigner.net/","rel":["nofollow"]},"children":[{"type":"text","value":"FunDesigner"}]},{"type":"text","value":" 提供的 "},{"type":"element","tag":"a","props":{"href":"http://fundesigner.net/wordpress-theme-development-guide/","rel":["nofollow"]},"children":[{"type":"text","value":"免費 WORDPRESS 佈景主題開發指南電子書"}]},{"type":"text","value":"，讓我得以把整體概念暸解一遍，再透過"},{"type":"element","tag":"a","props":{"href":"https://codex.wordpress.org/Function_Reference","rel":["nofollow"]},"children":[{"type":"text","value":"官方的文件"}]},{"type":"text","value":"做比較細節的暸解，總算將在 Jekyll 已經有基礎的前端設計移植過來了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"早在使用 Jekyll 時，我已經針對自己偏好的風格去做部落格主題的實作，要移植過來主要就是將 Jekyll 的語法轉換成 WordPress 提供的 PHP 函式。這部分如上述，透過該電子書以及官方文件一一完成移植了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不過因為原本的設計仍有許多地方要加強，尤其是後面 Sass 的程式碼凌亂不堪，所以也順勢重新整理，並加上原本缺乏的 RWD，開始做比較細節的改動，讓部落格在手機、平板、電腦上都能有比較良好的瀏覽體驗。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我將這個主題命名為 Modest，即為"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"謙虛的"}]},{"type":"text","value":"意思，與部落格名稱相呼應，希望讓讀者感受的風格是比較平淡無華，但在內容瀏覽上是舒適的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這部分唯一遇到的問題大概就是由於我不是公開的主題，每次有修改後都要重新上傳，導致一些主題的客製化欄位資料遺失。後來改用 Docekr 將這部分的程式 Volume 到伺服器上，再透過 Git 去做更新，就算是改善了這個問題，這部分的實作我也會後面提到。"}]},{"type":"element","tag":"h2","props":{"id":"漢字標準格式"},"children":[{"type":"text","value":"漢字標準格式"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"既然是一個注重內容以及其瀏覽舒適度為訴求的主題，那對於字體、字型、排版等都會有比較注重的調整，在這部分我使用了"},{"type":"element","tag":"a","props":{"href":"https://css.hanzi.co/","rel":["nofollow"]},"children":[{"type":"text","value":"漢字標準格式"}]},{"type":"text","value":"這套前端框架，幫我處理漢字瀏覽上的一些細節調整，包括字型、縮進、強調等，去取代西方的一些不適用在漢字瀏覽的慣例。細節可以到官方使用手冊瀏覽。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"比較有趣的是該框架還有提供高級排版功能，我啟用了"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"章節的編排"}]},{"type":"text","value":"這個功能，讓框架自動幫我在標題加上計數，以方便讀者瞭解文章的結構。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不過有一個比較令我猶豫的地方在於該框架對於標點符號樣式的修正。該框架對於"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"句點"}]},{"type":"text","value":"、"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"逗號"}]},{"type":"text","value":"、"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"頓號"}]},{"type":"text","value":"採用的字型是使其偏下，而不是台灣教育部規定的居中，這讓我挺不習慣的。所以在這裡我試圖尋找一些歷史沿革以及實際上的比較。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我在中國的知乎網站上找的一篇名為"},{"type":"element","tag":"a","props":{"href":"https://www.zhihu.com/question/19646540","rel":["nofollow"]},"children":[{"type":"text","value":"〈中国的文言文为什么没有标点符号？〉"}]},{"type":"text","value":"的討論串，裡面最高評分的解答去搜集了許多古籍資料做考證，讓我了解到在古文中標點符號的形式與沿革。不過重點是在於幾乎所有的句讀都是偏右的形式做排版（古文多以直書做書寫排版），換成現代網頁排版形式，也就是偏下。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"之後我又透過變數設定分別使用同一篇文章去比較這兩種排版在閱讀上的感受差異，如下圖："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-15-上午12.02.29.jpg]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-15-上午12.02.43.jpg]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"雖然還是覺得比較習慣居中的排版方式，但是撇除習慣，偏下的排版方式，在閱讀上能將句子斷的更明顯，閱讀上更加容易，所以最後還是決定採用偏下的排版方式。不過倒也想知道讀者的感覺，你們覺得是採居中的方式比較好閱讀呢？還是偏下呢？若可以，透過留言讓我知道吧。"}]},{"type":"element","tag":"h2","props":{"id":"外掛plugin"},"children":[{"type":"text","value":"外掛（Plugin）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"因為才剛從 Jekyll 移植過來，所以安裝的外掛到不會太多，畢竟原本的環境就偏向簡單，所以也不太會有額外的需求，另一方面也是讓部落格的系統盡量簡化。會安裝外掛的主要就是針對三大需求：Markdown 語法支援、程式碼上色、部落個資料備份。所以我也就只安裝三個外掛，在這邊我會針對這三個外掛做些簡介。"}]},{"type":"element","tag":"h3","props":{"id":"jetpack-由-wordpresscom-團隊開發"},"children":[{"type":"text","value":"Jetpack 由 WordPress.com 團隊開發"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這個外掛在前面已經有約略提過了，在目前 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"3.9.1"}]},{"type":"text","value":" 的版本裡提供了 37 項服務，多數服務都挺實用的，尤其是 Markdown 語法的支援還算完整（可惜沒有辦法自行擴充或調整）。當然，除了前面提過的在寫作上的支援外，也有針對安全性去封鎖惡意 IP 的服務、監聽網站是否離線的服務、減輕主機負擔的圖片快取服務等等，有興趣的可以自行安裝該外掛去查看。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-16-下午7.06.42.png]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外他也有簡單的網誌統計功能，讓你簡單直觀了解訪客流量的統計，這一方面也算是解決了我一項使用 Jekyll 的苦惱，讓我不用每次想看訪客資料都要到 Google Analysis，而可以先透過這邊的統計去了解。有想要比較深入的報表再去閱讀 Google Analysis 的資料即可。"}]},{"type":"element","tag":"h3","props":{"id":"crayon-syntax-highlighter"},"children":[{"type":"text","value":"Crayon Syntax Highlighter"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"2016-09-22: 本站已改用 highlight.js 作為著色工具，可以參照 "},{"type":"element","tag":"a","props":{"href":"https://blog.fntsr.tw/articles/2016/09/22/from-crayon-to-highlightjs/","rel":["nofollow"]},"children":[{"type":"text","value":"用 highlight.js 作為 wordpress 程式碼著色的程式"}]},{"type":"text","value":"。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"身為一個程式設計師，怎麼可以忍受部落格的程式碼沒有上色呢？不能嘛！XD"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"於是我在 WordPress 的外掛以"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Syntax Highlight"}]},{"type":"text","value":"為關鍵字去尋找，最後選定了目前活躍安裝度最高的 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon Syntax Highlighter"}]},{"type":"text","value":"。這款外掛的優點是彈性選項多，你可以針對目前的需求去做功能的勾選，另外他也能針對程式碼上色去選擇你喜歡的風格，甚至基於該風格再另外做客製化修正。而最重要的語言支援度上，它支援了 63 種語言，其中包括我常用的 C#, CSS, Java, JavaScript, PHP, Python, Ruby, Sass, Shell, YAML 等，最近比較出名的 Go, Swift 也有納入支援。有興趣進一步知道它支援哪些上色風格和語言的可以到他的 "},{"type":"element","tag":"a","props":{"href":"https://github.com/aramk/crayon-syntax-highlighter","rel":["nofollow"]},"children":[{"type":"text","value":"Github Ropository"}]},{"type":"text","value":" 做瀏覽。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不過儘管 Crayon 提供許多彈性的設定，但對我來說仍然有些地方不足。比如說他會直接把 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre>"}]},{"type":"text","value":" 標籤轉換成自己的標籤以提供上色服務，但是他的上色的預設風格（例如純文字的環境）又有奇怪的上色，當我希望能提供單一色調 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre>"}]},{"type":"text","value":" 時就會衝突。所以我將他的 Paser 說了點變化，讓它只會抓取有 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"crayon"}]},{"type":"text","value":" 屬性並以其結尾的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre>"}]},{"type":"text","value":" 標籤，像是這樣 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre class=\"...\" crayon>...</pre>"}]},{"type":"text","value":"，這樣我就可以讓一般的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre>"}]},{"type":"text","value":" 標籤和給 Crayon 上色的部分共存了。"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/#fn-259-2","rel":["nofollow"]},"children":[{"type":"text","value":"2"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"修改方式很簡單，使用外掛編輯器打開 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wp.php"}]},{"type":"text","value":" 這份檔案，如下所述修改 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"capture_crayons()"}]},{"type":"text","value":" 的內容即可。"}]},{"type":"element","tag":"code","props":{"code":"if ((CrayonGlobalSettings::val(CrayonSettings::CAPTURE_PRE) || $skip_setting_check) && $in_flag[CrayonSettings::CAPTURE_PRE]) {\n    # 刪除這行\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre(?=(?:([^>]*)\\bclass\\s*=\\s*([\"\\'])(.*?)\\2([^>]*))?)([^>]*)>(.*?)<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_tag', $wp_content);\n\n    # 以這行取代之\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre(?=(?:([^>]*)\\bclass\\s*=\\s*([\"\\'])(.*?)\\2([^>]*))?)([^>]*)crayon>(.*?)<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_tag', $wp_content);\n}\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if ((CrayonGlobalSettings::val(CrayonSettings::CAPTURE_PRE) || $skip_setting_check) && $in_flag[CrayonSettings::CAPTURE_PRE]) {\n    # 刪除這行\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre(?=(?:([^>]*)\\bclass\\s*=\\s*([\"\\'])(.*?)\\2([^>]*))?)([^>]*)>(.*?)<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_tag', $wp_content);\n\n    # 以這行取代之\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre(?=(?:([^>]*)\\bclass\\s*=\\s*([\"\\'])(.*?)\\2([^>]*))?)([^>]*)crayon>(.*?)<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_tag', $wp_content);\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外，我也希望能整合 Markdown 語法去支援類似 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~~~php"}]},{"type":"text","value":" 的語法，但是 Jetpack 提供的 Markdown 會自動將這種用法將 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~~~"}]},{"type":"text","value":" 轉成 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre><code>"}]},{"type":"text","value":" 、將 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~~~php"}]},{"type":"text","value":" 轉成 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre><code class=\"php\">"}]},{"type":"text","value":" ，而不是 Crayon 可以 Parse 的語法。所以我做了以下修改。首先一樣修改 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wp.php"}]},{"type":"text","value":"的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"capture_crayons()"}]},{"type":"text","value":" 方法，在剛剛修改的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" 判斷是裡新增一行去抓取 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<pre><code class=\"php\">...</code ></pre>"}]},{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/#fn-259-3","rel":["nofollow"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" 的敘述改成 Crayon 可以讀取的格式，如下："}]},{"type":"element","tag":"code","props":{"code":"if ((CrayonGlobalSettings::val(CrayonSettings::CAPTURE_PRE) || $skip_setting_check) && $in_flag[CrayonSettings::CAPTURE_PRE]) {\n    # 加入這行，要放在這個判斷式裡的首行\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre\\s*>\\s*<code>(.*?)</code>\\s*<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_code_tag', $wp_content);\n\n    # 這是我們在上面加入，不過本次修改不相依上面的修改，不一定改過這行。\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre(?=(?:([^>]*)\\bclass\\s*=\\s*([\"\\'])(.*?)\\2([^>]*))?)([^>]*)crayon>(.*?)<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_tag', $wp_content);\n}\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if ((CrayonGlobalSettings::val(CrayonSettings::CAPTURE_PRE) || $skip_setting_check) && $in_flag[CrayonSettings::CAPTURE_PRE]) {\n    # 加入這行，要放在這個判斷式裡的首行\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre\\s*>\\s*<code>(.*?)</code>\\s*<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_code_tag', $wp_content);\n\n    # 這是我們在上面加入，不過本次修改不相依上面的修改，不一定改過這行。\n    $wp_content = preg_replace_callback('#(?<!\\$)<\\s*pre(?=(?:([^>]*)\\bclass\\s*=\\s*([\"\\'])(.*?)\\2([^>]*))?)([^>]*)crayon>(.*?)<\\s*/\\s*pre\\s*>#msi', 'CrayonWP::pre_tag', $wp_content);\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然後在 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wp.php"}]},{"type":"text","value":" 的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"class CrayonWP {}"}]},{"type":"text","value":" 中加入一個靜態方法："}]},{"type":"element","tag":"code","props":{"code":"class CrayonWP {\n    ....\n\n    # 加入此方法去轉換格式\n    public static function pre_code_tag($matches) {\n        $lang = $matches[1];\n        $content = $matches[2];\n\n        # 這邊要注意如果你沒有套用上面 `<pre crayon>` 的修改，要將 ` crayon` 刪除\n        $result = \"<pre class=\\\"lang:{$lang}\\\" crayon>{$content}</pre>\";\n        return $result;\n    }\n\n    ...\n}\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"class CrayonWP {\n    ....\n\n    # 加入此方法去轉換格式\n    public static function pre_code_tag($matches) {\n        $lang = $matches[1];\n        $content = $matches[2];\n\n        # 這邊要注意如果你沒有套用上面 `<pre crayon>` 的修改，要將 ` crayon` 刪除\n        $result = \"<pre class=\\\"lang:{$lang}\\\" crayon>{$content}</pre>\";\n        return $result;\n    }\n\n    ...\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如此就可以成功支援 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~~~language"}]},{"type":"text","value":" 的語法了。"}]},{"type":"element","tag":"h3","props":{"id":"updraftplus-backuprestore"},"children":[{"type":"text","value":"UpdraftPlus – Backup/Restore"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這是用來作為備份和還原的外掛，這部分就見仁見智了，你可使用 Jetpack 提供的付費備份還原服務，也可以使用其他比較知名的外掛，以關鍵字 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Backup"}]},{"type":"text","value":" 去搜尋就會找到挺多的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-16-下午11.59.22.png]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本部落格一樣是採用目前活躍安裝度最高的外掛，叫做 UpdraftPlus Backup/Restore，他擁有我需要的基本功能如最基本的備份和還原、還有定期備份、將備份檔同步到雲端空間，基本上我只要有這三個就足以滿足我的需求了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-17-上午12.03.42.png]]"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外我也針對備份做了雙保險，就是利用 Docker 將 WordPress 存放的資料的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wp-content"}]},{"type":"text","value":" 以及 MariaDB 的資料庫檔案 Volume 出來，然後再透過排程去執行腳本，定期將這兩個資料夾壓縮備份到 Nas 上，這部分我會在下一個章節細述。"}]},{"type":"element","tag":"h2","props":{"id":"環境部署與架設"},"children":[{"type":"text","value":"環境部署與架設"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"自從會使用 Docker 後，要架設一個服務我都會率先尋找是否已經有相關映像檔（Image），以節省安裝環境與架設服務的時間。Wordpress 身為知名的部落格系統，官方很早就有提供其映像檔，詳細資訊可看 "},{"type":"element","tag":"a","props":{"href":"https://hub.docker.com/_/wordpress/","rel":["nofollow"]},"children":[{"type":"text","value":"WordPress 在 Docker Hub 的頁面"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而隨著 Docker Compose 逐漸普遍與成熟，官方也有提供 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" 的設定樣本給使用者，事實上該設定檔已足以讓我架設 WordPress。但為了開發方便以及避免不小心把容器砍掉導致資料消逝，或是未來升級版本更加方便，我都會習慣把"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"資料"}]},{"type":"text","value":"所在資料夾做 Volume，讓其資料與 Host 上同步。在新增 Volumes 的設定後，我的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" 設定檔如下："}]},{"type":"element","tag":"code","props":{"code":"wordpress:\n  image: wordpress:4.7.1-php7.1-apache\n  restart: always\n  environment:\n    WORDPRESS_DB_PASSWORD: YOUR_PASSWORD\n  links:\n    - db:mysql\n  ports:\n    - 8080:80\n  volumes:\n    - ./wp-content:/var/www/html/wp-content\n\ndb:\n  image: mariadb\n  restart: always\n  environment:\n    MYSQL_ROOT_PASSWORD: YOUR_PASSWORD\n  volumes:\n    - ./database:/var/lib/mysql\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"wordpress:\n  image: wordpress:4.7.1-php7.1-apache\n  restart: always\n  environment:\n    WORDPRESS_DB_PASSWORD: YOUR_PASSWORD\n  links:\n    - db:mysql\n  ports:\n    - 8080:80\n  volumes:\n    - ./wp-content:/var/www/html/wp-content\n\ndb:\n  image: mariadb\n  restart: always\n  environment:\n    MYSQL_ROOT_PASSWORD: YOUR_PASSWORD\n  volumes:\n    - ./database:/var/lib/mysql\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"幸運的是，這些映像檔都有針對這部份做最佳化，你不用擔心在 Host 上無資料，因而將空資料夾取代掉容器中原本有檔案的資料夾，導致容器建立失敗。Wordpress 的映像檔會先建立容器後，再把 WordPress 的程式檔案丟到 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/var/www/html/"}]},{"type":"text","value":" 中以進行安裝。同樣的 MariaDB 的映像檔也有類似的支援。因此儘管一開始沒有資料，仍可直接以此設定檔建立容器。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以環境建立與部署很簡單，只要伺服器上有 Docker 和 Docker-Compose 即可。隨後建立一個資料夾，並將上面的設定檔寫在該資料夾下的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":" 中，最後在該資料夾下輸入指令 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"docker-compose up"}]},{"type":"text","value":"，Wordpress 就建立起來啦！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最後，我們就透過 Host 的命令列，移動到 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"wp-content/themes/"}]},{"type":"text","value":" 資料夾下，使用 git 將自己客製化的主題複製（"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"git clone"}]},{"type":"text","value":"）到此目錄下，再利用 WordPress 後台的佈景主題頁面去啟用，就成功將我的主題套用在 WordPress 上啦！"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"![[螢幕快照-2016-02-17-上午6.06.43.png]]"}]},{"type":"element","tag":"h2","props":{"id":"結語"},"children":[{"type":"text","value":"結語"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"從去年十二月開始有念頭要將部落格從 Jekyll 遷移到 WordPress 上，到實際完成大概經歷了兩個月，實際動工的時間大概就是從農曆新年假期開始的約莫兩週左右。這一週耗費最多時間的大概就是在主題的移植與改進，也趁機弄熟了 WordPress 主題的製作方式，再來大概就是去將程式碼高亮、資料備份等雜事都推上軌道。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"另外耗費許多時間的大概就是將文章轉過來，這部分我就沒有透過程式處理了，畢竟網路上的程式大概都是幫你從 WordPress 轉移到 Jekyll，我這種遷移反而是小眾了，況且文章還不多，比起自己在寫程式或正規表達式，手動轉倒是比較省事。另一方面自己手動轉過來也是為了重新審視自己以前寫的文章，知道未來有空要針對哪些文章做維護，尤其是 Docker 相關的文章，可能過期不少了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"嘛，耗費不少時間做這件事，希望算有移除以前懶得寫文章的障礙，讓自己能願意再多寫文章充實這個部落個囉。接下來半年算是自己的論文衝刺期，或許也會將蒐集到的資料與想法，局部的放在這個地方作為筆記。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最後，新的西元年、農曆年，還請大家多多指教。 <(_ _)>"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"雖然 WordPress 官方的 Markdown Quick Reference 有提到是有支援的，但我自行嘗試後是沒有成功上色的，不知道問題是出在哪裡（版本不同、文件過期之類的？）。若是有讀者實驗後是有的，還煩請跟我說一聲，我們再討論交流一下。w "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/#fnref-259-1","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"↩","src":"https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg"},"children":[]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"另一種方案就是新增一個語言支援（例如取名為 txt），然後不使用任何配色。 "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/#fnref-259-2","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"↩","src":"https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg"},"children":[]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"在寫這邊文章時，發現 Jetpack Markdown 只要使用到含有 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"</code>"}]},{"type":"text","value":" 的 code 語法時就會 Parser 錯誤，如 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"...</code>..."}]},{"type":"text","value":" 。但若中間有加空格如 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"</ code>"}]},{"type":"text","value":" 或 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"</code >"}]},{"type":"text","value":" 就沒事，所以在這裡我們才這樣表示。在註解裡則是裡用 Markdown 可以使用 HTML Tag，且 Parser 不會去解析 HTML Tag 中的文字的特性，使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"<code>&lt;/code&gt;</code>"}]},{"type":"text","value":" 這種較難維護的語法做表示。 "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/259/#fnref-259-3","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"↩","src":"https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg"},"children":[]}]}]}]}]},"title_en":"From Jekyll to Wordpress","slug":"from-jekyll-to-wordpress","aliases":["從 Jekyll 遷移至 WordPress","From Jekyll to Wordpress"],"created_at":"2016-02-15T19:53:14.000Z","published_at":null,"updated_at":null,"tags":["docker","jekyll","wordpress"],"moc":["Information Technology"],"_type":"markdown","_id":"garden:legacy-articles:2016-02-15-from-jekyll-to-wordpress.md","_source":"garden","_file":"legacy-articles/2016-02-15-from-jekyll-to-wordpress.md","_extension":"md"},{"_path":"/legacy-articles/2016-03-06-10-things-to-avoid-in-docker-containers","_dir":"legacy-articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Tr: 在 Docker Container 裡應該避免的 10 件事","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/","rel":["nofollow"]},"children":[{"type":"text","value":"Tr: 在 Docker Container 裡應該避免的 10 件事 - 深藏若虛"}]}]},{"type":"element","tag":"h2","props":{"id":"來源"},"children":[{"type":"text","value":"來源"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本篇文章譯自 "},{"type":"element","tag":"a","props":{"href":"https://github.com/rafabene","rel":["nofollow"]},"children":[{"type":"text","value":"Rafael Benevides"}]},{"type":"text","value":" 在 2016/02/24 於 "},{"type":"element","tag":"a","props":{"href":"http://developerblog.redhat.com/","rel":["nofollow"]},"children":[{"type":"text","value":"RED HAT DEVELOPER BLOG"}]},{"type":"text","value":" 上發表的 "},{"type":"element","tag":"a","props":{"href":"http://developerblog.redhat.com/2016/02/24/10-things-to-avoid-in-docker-containers/","rel":["nofollow"]},"children":[{"type":"text","value":"10 things to avoid in docker containers"}]},{"type":"text","value":" 一文。已寫信徵得原作者得同意以進行翻譯。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"希望能透過本篇翻譯，讓臺灣社群對於 Docker container 的使用與理解有所幫助。 = )"}]},{"type":"element","tag":"h2","props":{"id":"譯文"},"children":[{"type":"text","value":"譯文"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"嘿，看來您終於也投入 Container（譯註：本文若沒特別說明，Container 皆是指 Docker container）"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fn-311-1","rel":["nofollow"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" 的懷抱了，相信您也發現它能夠解決很多問題並擁有很多優點："}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"不可變的（immutable）："},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n因為作業系統、函式庫（library）版本、設定、資料夾、應用程式都被包裝在 Container 裡頭，所以您能確保相同的 Image（譯註：本文若沒特別說明，Image 皆是指 Docker image）"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fn-311-2","rel":["nofollow"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"，在 QA 的測試下與正式環境中，都會擁有同樣的行為。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"輕量的："},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nContainer 只使用少量的記憶體。不再需要耗費成千上百 MB 的記憶體，Container 只會使用主程序所需的用量，再多加上數十 MB 的記憶體而已。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"快速的："},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n您可以啟動 Container 就像是平時啟動 Linux 程序一樣快。不再需要耗費數分鐘，您可以在幾秒內就啟動一個全新的 Container 。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然而，很多使用者仍然對待 Container 像是以往對待虛擬機器一般，認為虛擬化技術該有的優點 Container 都沒落下，卻忘記了 Container 除此之外的另一個絕大優勢："},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"它是一次性的（disposable）。"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Container 的使用哲學：「容器用於一時」"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fn-311-3","rel":["nofollow"]},"children":[{"type":"text","value":"3"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://i0.wp.com/blog.fntsr.tw/wp-content/uploads/2016/03/containers_are_-ephemeral.png?ssl=1","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"Containers are ephemeral","src":"https://i0.wp.com/blog.fntsr.tw/wp-content/uploads/2016/03/containers_are_-ephemeral.png?ssl=1"},"children":[]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這個特性「本身」促使使用者改變他們對於處理與管理 Container 的習慣。接下來我會解釋您不應在 Container 裡做什麼，以確保它能發揮最大效益。"}]},{"type":"element","tag":"h5","props":{"id":"一不要在-container-裡儲存資料data"},"children":[{"type":"text","value":"一、不要在 Container 裡儲存資料（data）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Container 是可以被停止、摧毀、或是取代的。一個運行 1.0 版應用程式的 Container 應該要可以輕易被運行 1.1 版的 Container 輕易地取代，且不會影響或失去任何資料。如果您真的需要儲存資料，請將它存在 volume "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fn-311-4","rel":["nofollow"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":"。不過如果兩個 Container 都對同一個 volume 寫進資料，要注意是否可能造成出錯，並確保您的應用程式是否有設計寫入共同資料的功能。"}]},{"type":"element","tag":"h5","props":{"id":"二不要將應用程式分兩部份搬移"},"children":[{"type":"text","value":"二、不要將應用程式分兩部份搬移"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如同有些人會將 Container 視為虛擬機器，裡頭的多數人也會傾向認為應該要將應用程式部署在一個運行中的 Container。當您在開發階段這麼做倒無可厚非，因為您可能要持續地部署與除錯。但在持續交付"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fn-311-5","rel":["nofollow"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":"通往 QA 和正式環境的自動化 pipeline 流程裡，您的應用程式應該是 Image 的一部份。記住："},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Container 是不可變的"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"h5","props":{"id":"三不要建立大型的-image"},"children":[{"type":"text","value":"三、不要建立大型的 Image"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"一個大型的 Image 只會讓它難以被散佈。確認您是否只放置應用程式/程序所需的檔案和函式庫，不要在建置時安裝多餘的套件或是進行套件更新（像是 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"yum update"}]},{"type":"text","value":" 或 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"apt-get upgrade"}]},{"type":"text","value":"）"},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fn-311-6","rel":["nofollow"]},"children":[{"type":"text","value":"6"}]},{"type":"text","value":"，這樣會下載過多的檔案加進新的 Image 層。"}]},{"type":"element","tag":"h5","props":{"id":"四不要使用單層式的-image"},"children":[{"type":"text","value":"四、不要使用單層式的 Image"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"為了有效率地使用分層式檔案系統（layered filesystem），請總是為 OS 建置您專屬的 Base Image，然後為"},{"type":"element","tag":"a","props":{"href":"https://github.com/jboss-dockerfiles/base/blob/master/Dockerfile","rel":["nofollow"]},"children":[{"type":"text","value":"使用者名稱定義"}]},{"type":"text","value":"、"},{"type":"element","tag":"a","props":{"href":"https://github.com/jboss-dockerfiles/wildfly/blob/master/Dockerfile","rel":["nofollow"]},"children":[{"type":"text","value":"執行時期所需安裝"}]},{"type":"text","value":"、設定、您的應用程式各獨立建置一層。這會讓您在 Image 的重建和管理更加簡易，並易於散佈。"}]},{"type":"element","tag":"h5","props":{"id":"五不要用執行中的-container-建立-image"},"children":[{"type":"text","value":"五、不要用執行中的 Container 建立 Image"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以行話來說，就是不要使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"docker commit"}]},{"type":"text","value":" 去建立 Image。這種方式建立的 Image 是難以重現的，應該要徹底避免。請務必使用 Dockerfile 或時其他可以完全重現的 "},{"type":"element","tag":"a","props":{"href":"https://github.com/openshift/source-to-image","rel":["nofollow"]},"children":[{"type":"text","value":"S2I（source-to-image）"}]},{"type":"text","value":"方式去做這件事。另外，若是您使用程式碼版本控制系統（如 git）去儲存 Dockerfile，您就可以追蹤 Dockerfile 的變動。"}]},{"type":"element","tag":"h5","props":{"id":"六不要只使用latest標籤"},"children":[{"type":"text","value":"六、不要只使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":" 標籤"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":" 標籤就像是 Maven 使用者的 SNAPSHOT。多使用標籤，以善用分層式檔案系統的特性。您不會希望在您建置 Image 的幾個月後，驚訝的發現您的應用程式竟然不能執行，探究原因後才發現是因為父層級（Dockerfile 中的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"FROM"}]},{"type":"text","value":"）被一個無法向下相容的新版本給取代了，或是因為從建置快取中取得錯誤的 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":" 導致。"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"latest"}]},{"type":"text","value":" 標籤也應該避免使用在正式環境下部署 Container，因為您不能追蹤您的 Container 到底是跑哪一個 Image 版本。"}]},{"type":"element","tag":"h5","props":{"id":"七不要在一個-container-跑超過一個程序"},"children":[{"type":"text","value":"七、不要在一個 Container 跑超過一個程序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"程序可以完美的去執行一個程序（像是 http daemon、application server、database），但如果您執行超過一個程序，您可能會在管理、讀取紀錄或獨立更新上都感到棘手。"}]},{"type":"element","tag":"h5","props":{"id":"八不要在-image-儲存憑証請使用環境變數"},"children":[{"type":"text","value":"八、不要在 Image 儲存憑証，請使用環境變數"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不要將您的使用者名稱或是密碼寫死（hard-code）在 Image 中。請使用環境變數從 Container 外面取得這些資訊。像是 "},{"type":"element","tag":"a","props":{"href":"https://github.com/docker-library/postgres/blob/443c7947d548b1c607e06f7a75ca475de7ff3284/9.5/docker-entrypoint.sh","rel":["nofollow"]},"children":[{"type":"text","value":"Postgres Image"}]},{"type":"text","value":" 就是一個很好的典範。"}]},{"type":"element","tag":"h5","props":{"id":"九使用非-root-的使用者去執行程序"},"children":[{"type":"text","value":"九、使用非 root 的使用者去執行程序"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"「Docker container 預設會使用 root 去執行程序。….隨著 docker 越來越成熟，會有更多安全的預設設定可以使用。現在，需要用 root 對其他人是有危險的，且可能無法在所有環境中使用。您的 Image 應該使用 USER 指令去指定非 root 的使用者讓 container 執行。….」——"},{"type":"element","tag":"a","props":{"href":"http://www.projectatomic.io/docs/docker-image-author-guidance/","rel":["nofollow"]},"children":[{"type":"text","value":"Guidance for Docker Image Authors"}]}]},{"type":"element","tag":"h5","props":{"id":"十不要相依-ip-位址"},"children":[{"type":"text","value":"十、不要相依 IP 位址"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"每個 Container 都擁有他們自己內部的 IP 位址，並可能會在您啟動或停止 Container 時被改變。如果您的應用程式或是微服務需要跟另一個的 Container 溝通，請利用環境變數將合適的 hostname 和 port 從一個 Container 傳遞給另一個 Container 。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"更多關於 Container 的資訊，請參考並註冊 "},{"type":"element","tag":"a","props":{"href":"http://developers.redhat.com/containers/","rel":["nofollow"]},"children":[{"type":"text","value":"http://developers.redhat.com/containers/"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"alt":"[]containers","src":"https://i0.wp.com/blog.fntsr.tw/wp-content/uploads/2016/03/containers.png?ssl=1"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"譯註"},"children":[{"type":"text","value":"譯註"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"深刻體會到讀懂英文與翻譯成中文是兩回事。若有任何覺得翻譯不妥，或是覺得可以更好的建議，歡迎留言告知。最後特別感謝 "},{"type":"element","tag":"a","props":{"href":"https://www.facebook.com/groups/docker.taipei/","rel":["nofollow"]},"children":[{"type":"text","value":"Docker.Taipei"}]},{"type":"text","value":" 社群的先進 "},{"type":"element","tag":"a","props":{"href":"https://www.facebook.com/philipzh","rel":["nofollow"]},"children":[{"type":"text","value":"Philip Zheng"}]},{"type":"text","value":"、"},{"type":"element","tag":"a","props":{"href":"https://www.facebook.com/william.yeh?fref=ufi","rel":["nofollow"]},"children":[{"type":"text","value":"William Yeh"}]},{"type":"text","value":" 及友人 "},{"type":"element","tag":"a","props":{"href":"https://github.com/david50407","rel":["nofollow"]},"children":[{"type":"text","value":"Davy"}]},{"type":"text","value":"、"},{"type":"element","tag":"a","props":{"href":"http://saru.moe/","rel":["nofollow"]},"children":[{"type":"text","value":"猴子"}]},{"type":"text","value":"、Micheal、Chorld 提供諮詢與建議。"}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Container，中文多翻為容器，本文特別指 Docker container，而非泛指所有 container。考證臺灣社群與相關報導，決定在文本維持英文，並採用原文"},{"type":"element","tag":"del","props":{},"children":[{"type":"text","value":"使用小寫。，且為了與一般容器區隔，刻意使用首字大寫表示其為狹義性。 "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fnref-311-1","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"↩","src":"https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg"},"children":[]}]}]},{"type":"text","value":" "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"del","props":{},"children":[{"type":"text","value":"Image，中文在台灣社群多翻為映像檔，中國社群則為鏡像，本文特別指 Docker image，與虛擬機器的 image 概念不盡相同。考證臺灣社群與相關報導，決定在文本維持英文，並採用原文"}]},{"type":"text","value":"使用小寫。，且為了與虛擬機器的 image 區隔，刻意使用首字大寫表示其為狹義性。 "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/311/#fnref-311-2","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"↩","src":"https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg"},"children":[]}]},{"type":"text","value":"~~~~ "}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"code":"","filename":"![↩](https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg)","language":"ephemeral"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":""}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"code":"","filename":"![↩](https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg)","language":"volume，在《Docker —— 從入門到實踐­》正體中文版翻作資料卷，在這裡採用原文會比較直觀。 "},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":""}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"code":"","filename":"山姆鍋對持續整合、持續部署、持續交付的定義](https://samkuo.me/post/2013/10/continuous-integration-deployment-delivery/)，本文就不多描述了。 [![↩](https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg)","language":"continuous"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":""}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"code":"","filename":"![↩](https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg)","language":"因為台灣"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":""}]}]}]}]}]},{"type":"element","tag":"code","props":{"code":""},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":""}]}]}]}]},"title_en":"10 things to avoid in docker containers","slug":"10-things-to-avoid-in-docker-containers","aliases":["Tr: 在 Docker Container 裡應該避免的 10 件事","10 things to avoid in docker containers"],"created_at":"2016-03-06T08:57:50.000Z","published_at":null,"updated_at":null,"tags":["docker","translate"],"moc":["Information Technology"],"_type":"markdown","_id":"garden:legacy-articles:2016-03-06-10-things-to-avoid-in-docker-containers.md","_source":"garden","_file":"legacy-articles/2016-03-06-10-things-to-avoid-in-docker-containers.md","_extension":"md"}]