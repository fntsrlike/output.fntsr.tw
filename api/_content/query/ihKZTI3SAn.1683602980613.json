[{"_path":"/legacy-articles/2016-09-13-expose-jquery-to-global-variable-with-webpack","_dir":"legacy-articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"讓 jQuery 在 webpack 中成為全域變數","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/363/","rel":["nofollow"]},"children":[{"type":"text","value":"讓 jQuery 在 webpack 中成為全域變數 - 深藏若虛"}]}]},{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"這兩三年，可謂前端技術更迭不斷、框架不斷推陳出新的尖峰時期，本來就比較沒有再碰前端技術、以及專注在碩士求學生涯的我也算是落後許多。在拿到碩士學位後，又重新開始投入 Web 開發，不斷學習新知，尤其是在前端技術方面。最近開始使用 webpack 做為 module bundler，這篇主要就是紀錄初期使用 webpack 時遇到的一個撞牆點。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"儘管前端框架越來越多，angular.js、react.js 以及最近竄起的 vue.js 開始主導整個網頁前段的流程控制以及事件觸發，但是許多 CSS 框架仍是相依在 jQuery 上，且可能沒有對其他 JavaScript 框架有著完整的支援，所以在使用 JavaScript 框架之餘，仍需要使用 jQuery 作為驅動 CSS 框架的手段。最近開始嘗試使用 vue.js 與 webpack 的組合去做網站開發，在套用 semantic-ui 和 materialize 這兩門前端設計框架時，就遇到了找不到 jQuery 套件庫的錯誤，導致網站的 JavaScrit 程序被中斷，無法繼續執行下去。"}]},{"type":"element","tag":"h2","props":{"id":"誤區"},"children":[{"type":"text","value":"誤區"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"依照 webpack 去引入 JavaScript 的套件，以為只要在 js 檔案中加入下面兩行程式碼即可。但首先遇到的就是 JSLint 發出重複 import 的錯誤，直接否決掉這個做法。"}]},{"type":"element","tag":"code","props":{"code":"// Error: no-duplicate-imports  'jquery' import is duplicated\nimport $ from 'jquery'\nimport jQuery from 'query'\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Error: no-duplicate-imports  'jquery' import is duplicated\nimport $ from 'jquery'\nimport jQuery from 'query'\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"為了避開這個錯誤，改只有 import 一次，用變數賦值去改善這個問題。在引入 semantic-ui 或 materialize 時，仍然出現了 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ReferenceError: Can't find variable: jQuery"}]},{"type":"text","value":" 的錯誤。"}]},{"type":"element","tag":"code","props":{"code":"// Error: ReferenceError: Can't find variable: jQuery\nimport $ from 'jquery'\nvar jQuery = $\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Error: ReferenceError: Can't find variable: jQuery\nimport $ from 'jquery'\nvar jQuery = $\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接著稍微 Google，有人提到要讓 jQuery 掛載 window 物件下成為全域變數，就可以解決問題了。所以嘗試以下面程式碼解決問題，但仍然得到 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ReferenceError: Can't find variable: jQuery"}]},{"type":"text","value":" 的錯誤。"}]},{"type":"element","tag":"code","props":{"code":"// Error: ReferenceError: Can't find variable: jQuery\nimport jquery from 'jquery'\n\nwindow.$ = jquery\nwindow.jQuery = jquery\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Error: ReferenceError: Can't find variable: jQuery\nimport jquery from 'jquery'\n\nwindow.$ = jquery\nwindow.jQuery = jquery\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以上解法都失敗。目前對於 webpack 還不甚熟悉，只有在同一個檔案內的程式碼可以使用 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$"}]},{"type":"text","value":"、"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jQuery"}]},{"type":"text","value":" 呼叫 jQuery，但若是 import 的 JavaScript 套件需要 jQuery 時就會找不到，在網頁開啟開發者工具區呼叫這兩個變數時也會找不到。推估是因為 webpack 對於每個檔案的變數宣告的作用範圍 (scope) 都侷限在檔案裡，不會真的成為全域變數，所以就算把 jQuery 掛在 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"window"}]},{"type":"text","value":" 物件內，仍無法解決問題。這個假設等未來對前端更熟悉後，再來嘗試驗證。"}]},{"type":"element","tag":"h2","props":{"id":"解法"},"children":[{"type":"text","value":"解法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"既然無法從單個檔案解決問題，就只好換個方向，嘗試使用設定檔解決問題。繼續嘗試 Google 尋找資料，得到大致有兩種解法，且都是可以運作的。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"不管是何種解法，首先就是要透過 npm 安裝 jQuery："}]},{"type":"element","tag":"code","props":{"code":"npm install --save jquery\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm install --save jquery\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"第一種是使用 webpack plugin 的方式，透過 Provide Plugin "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/363/#fn-363-1","rel":["nofollow"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" 讓 jQuery 成為全域變數。編輯 webpack 的設定檔，在 module.exports.plugins 中加入 Webpack ProvidePlugins，並把 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$"}]},{"type":"text","value":"、"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jQuery"}]},{"type":"text","value":" 這兩個全域變數指向 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jquery"}]},{"type":"text","value":" 套件庫。"}]},{"type":"element","tag":"code","props":{"code":"plugins: [\n  // other plugins\n  // ...\n  new webpack.ProvidePlugin({\n     $: \"jquery\",\n     jQuery: \"jquery\"\n  })\n]\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"plugins: [\n  // other plugins\n  // ...\n  new webpack.ProvidePlugin({\n     $: \"jquery\",\n     jQuery: \"jquery\"\n  })\n]\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"第二種解法則是使用 expose-loader。首先先透過 npm 安裝 expose-loader："}]},{"type":"element","tag":"code","props":{"code":"npm install expose-loader --save\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm install expose-loader --save\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然後編輯 webpack 的設定檔，在 module.exports.loaders 中加入下面的程式碼，把 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jquery"}]},{"type":"text","value":" 套件庫揭露 (expose) 成 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"$"}]},{"type":"text","value":"、"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"jQuery"}]},{"type":"text","value":" 這兩個全域變數。"}]},{"type":"element","tag":"code","props":{"code":"loaders: [\n  // other loaders\n  // ...\n  {\n    test: require.resolve('jquery'),\n    loader: 'expose?jQuery!expose?$'\n  }\n]\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"loaders: [\n  // other loaders\n  // ...\n  {\n    test: require.resolve('jquery'),\n    loader: 'expose?jQuery!expose?$'\n  }\n]\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"設定檔完成後，重新啟動伺服器。此時網頁仍會顯示 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"ReferenceError: Can't find variable: jQuery"}]},{"type":"text","value":" 的錯誤。這時打開網頁的腳本，加入下面的程式碼即可解決這個問題。"}]},{"type":"element","tag":"code","props":{"code":"import 'jquery`\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import 'jquery`\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"補充：後來在參考資料第二項的文章裡，發現還有許多其他解法，有興趣的可以前往該頁面閱讀。"}]},{"type":"element","tag":"h2","props":{"id":"參考資料"},"children":[{"type":"text","value":"參考資料"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://stackoverflow.com/questions/29080148/expose-jquery-to-real-window-object-with-webpack","rel":["nofollow"]},"children":[{"type":"text","value":"Expose jQuery to real Window object with Webpack"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://stackoverflow.com/questions/28969861/managing-jquery-plugin-dependency-in-webpack","rel":["nofollow"]},"children":[{"type":"text","value":"Managing Jquery plugin dependency in webpack"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://react-china.org/t/webpack-jquery-bootstrap/1669","rel":["nofollow"]},"children":[{"type":"text","value":"React China – 求大牛帮忙，用webpack 打包jquery、bootstrap时出错。"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://rhadow.github.io/2015/05/30/webpack-loaders-and-plugins/","rel":["nofollow"]},"children":[{"type":"text","value":"Rhadow’s Tech Note – 深入了解 Webpack Plugins"}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"「Provide Plugin 的主要功能是當在程式中遇到特定字元且沒被定義時會自動載入特定模組。」via Ref-4 "},{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/363/#fnref-363-1","rel":["nofollow"]},"children":[{"type":"element","tag":"img","props":{"alt":"↩","src":"https://s.w.org/images/core/emoji/14.0.0/svg/21a9.svg"},"children":[]}]}]}]}]},"title_en":"Expose jQuery to global variable with Webpack","slug":"expose-jquery-to-global-variable-with-webpack","aliases":["讓 jQuery 在 webpack 中成為全域變數","Expose jQuery to global variable with Webpack"],"created_at":"2016-09-13T14:19:24.000Z","published_at":null,"updated_at":null,"tags":[],"moc":["Information Technology"],"_type":"markdown","_id":"garden:legacy-articles:2016-09-13 -expose-jquery-to-global-variable-with-webpack.md","_source":"garden","_file":"legacy-articles/2016-09-13 -expose-jquery-to-global-variable-with-webpack.md","_extension":"md"},{"_path":"/legacy-articles/2016-09-22-use-highlight-js-to-be-code-highlight-program-to-instead-of-crayon-syntax-highlighter","_dir":"legacy-articles","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"用 highlight.js 作為 wordpress 程式碼著色的程式","description":"","excerpt":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"http://blog.fntsr.tw/articles/402/","rel":["nofollow"]},"children":[{"type":"text","value":"http://blog.fntsr.tw/articles/402/"}]}]},{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"原本本部落格是使用 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon Syntax Highlighter"}]},{"type":"text","value":" 這套 WordPress 套件作為程式碼著色的程式，雖未說得上好用，但也算是符合需求。但該套件是不支援 "},{"type":"element","tag":"a","props":{"href":"https://jetpack.com/support/markdown/","rel":["nofollow"]},"children":[{"type":"text","value":"JetPack Markdown"}]},{"type":"text","value":" 渲染 HTML 標籤的格式，導致我每次更新套件時都要重新修正程式碼 (詳見"},{"type":"element","tag":"a","props":{"href":"https://blog.fntsr.tw/articles/2016/02/15/from-jekyll-to-wordpress/","rel":["nofollow"]},"children":[{"type":"text","value":"從 Jekyll 遷移至 WordPress"}]},{"type":"text","value":" 4.2 節)，不堪其擾，遂有想改用其他程式碼著色程式的念頭。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"當初轉移部落格到 WordPress 時，就有試過 "},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":"，但已經忘記當初沒有選擇這個著色程式的原因。不過今天嘗試改用這套程式時，發現體驗良好，既有喜歡的 Theme 又有支援多種語言，重點是該程式的規格和 "},{"type":"element","tag":"a","props":{"href":"https://jetpack.com/support/markdown/","rel":["nofollow"]},"children":[{"type":"text","value":"JetPack Markdown"}]},{"type":"text","value":" 渲染出來的標籤是同規格！所以就立即改用 "},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":" 作為著色程式。"}]},{"type":"element","tag":"h2","props":{"id":"比較"},"children":[{"type":"text","value":"比較"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":" 最大的優勢在能夠與 "},{"type":"element","tag":"a","props":{"href":"https://jetpack.com/support/markdown/","rel":["nofollow"]},"children":[{"type":"text","value":"JetPack Markdown"}]},{"type":"text","value":" 相容，我可以不用再另外處理就可以直接使用。除此之外，在語言支援度上 "},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":" 的 166 種程式語言也遠多於 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon"}]},{"type":"text","value":" 的 65 種，Themes 的數量也是略多，"},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":" 的更新頻率更是遠遠高過於 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon"}]},{"type":"text","value":"，更遑論 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon"}]},{"type":"text","value":" 的文件因為作者換部落格的關係，圖片都已經失效了。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若要說 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon"}]},{"type":"text","value":" 優勢，大概就是使用上比較適合非程式設計師背景的 wordpress 使用者，不用修改程式透過後台的介面勾勾選選就可以客製化自己想要的著色效果，也有提供標題、純文字化等效果，除此之外還有許多客製化設定選項可以套用。但對於我來說許多功能都是多餘的，所以並不是很有吸引力。"}]},{"type":"element","tag":"h2","props":{"id":"套用-highlightjs"},"children":[{"type":"text","value":"套用 highlight.js"}]},{"type":"element","tag":"h3","props":{"id":"cdn"},"children":[{"type":"text","value":"CDN"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最快的套用方式就是透過修改 wordpress 主題 (theme) 加入該程式的 cdn 連結："}]},{"type":"element","tag":"code","props":{"code":"<!-- 你可以將 `default` 換成任何你想要的主題名稱。 -->\n<!-- 如本站的 `monokai-sublime`。記得要保留 `.min`。 -->\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/styles/default.min.css\">\n\n<!-- 這邊會包含常用的 22 種語言。 -->\n<!-- 若所要套用的語言不含在其中，可另外到官網下載客制化的版本。 -->\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/highlight.min.js\"></script>\n\n<!-- 呼叫程式在 HTML 文件讀取完畢後進行程式碼著色 -->\n<script>hljs.initHighlightingOnLoad();</script> \n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- 你可以將 `default` 換成任何你想要的主題名稱。 -->\n<!-- 如本站的 `monokai-sublime`。記得要保留 `.min`。 -->\n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/styles/default.min.css\">\n\n<!-- 這邊會包含常用的 22 種語言。 -->\n<!-- 若所要套用的語言不含在其中，可另外到官網下載客制化的版本。 -->\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.7.0/highlight.min.js\"></script>\n\n<!-- 呼叫程式在 HTML 文件讀取完畢後進行程式碼著色 -->\n<script>hljs.initHighlightingOnLoad();</script> \n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"客製化"},"children":[{"type":"text","value":"客製化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"若要使用的語言不含在常用的語言裡，如 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Dockerfile"}]},{"type":"text","value":"、"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Go"}]},{"type":"text","value":"、"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Erb"}]},{"type":"text","value":"、"},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"YAML"}]},{"type":"text","value":"等，就需要另外"},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/download/","rel":["nofollow"]},"children":[{"type":"text","value":"到官網下載客製化版本"}]},{"type":"text","value":"。套用方式和上一節差不多，先把下載下來的套件放到主題專案裡，或是任何可以外連的空間，然後用上節的語法去引用即可。"}]},{"type":"element","tag":"h2","props":{"id":"結語"},"children":[{"type":"text","value":"結語"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"本篇雖然主要是講述利用 "},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":" 作為 WordPress 的程式碼著色程式，但只要任何可以把 "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~~~lang"}]},{"type":"text","value":" 轉換成 "},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code-inline","props":{"className":["”lang”"]},"children":[{"type":"text","value":"…"}]}]},{"type":"text","value":" 的部落格系統或靜態網頁產生器都可以簡單如上述的方式簡單套用。若是不是以 "},{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code-inline","props":{"className":["”lang”"]},"children":[{"type":"text","value":"…"}]}]},{"type":"text","value":" 作為輸出格式，官方亦有在首頁上示範利用 JavaScript 腳本去指定要套用的標籤樣板，使用文件也有示範利用 jQuery 的選擇器協助指定目標。比較進階的用法可以參考官方提供的 "},{"type":"element","tag":"a","props":{"href":"http://highlightjs.readthedocs.io/en/latest/api.html","rel":["nofollow"]},"children":[{"type":"text","value":"API 文件"}]},{"type":"text","value":"，裡面也有講述如何新增語言和樣式格式。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"透過 "},{"type":"element","tag":"a","props":{"href":"https://highlightjs.org/","rel":["nofollow"]},"children":[{"type":"text","value":"highlight.js"}]},{"type":"text","value":" 取代 "},{"type":"element","tag":"a","props":{"href":"https://wordpress.org/plugins/crayon-syntax-highlighter/","rel":["nofollow"]},"children":[{"type":"text","value":"Crayon"}]},{"type":"text","value":"，使得本站相依的套件又少一個。能利用主題 (theme) 直接處理的功能，就少用套件，如此也可減少伺服器的負擔，並且讓渲染專心在前端實作，前後端職責更加分明。"}]}]},"title_en":"Use highlight.js to be code highlight program to instead of Crayon Syntax Highlighter","slug":"use-highlight-js-to-be-code-highlight-program-to-instead-of-crayon-syntax-highlighter","aliases":["用 highlight.js 作為 wordpress 程式碼著色的程式","Use highlight.js to be code highlight program to instead of Crayon Syntax Highlighter"],"created_at":"2016-09-22T20:44:22.000Z","published_at":null,"updated_at":null,"tags":["javascript","web","wordpress"],"moc":["Information Technology"],"_type":"markdown","_id":"garden:legacy-articles:2016-09-22-use-highlight-js-to-be-code-highlight-program-to-instead-of-crayon-syntax-highlighter.md","_source":"garden","_file":"legacy-articles/2016-09-22-use-highlight-js-to-be-code-highlight-program-to-instead-of-crayon-syntax-highlighter.md","_extension":"md"}]